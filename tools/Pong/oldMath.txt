// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */

class Screen {
 static Array screen;
 static boolean cur;
 /** Initializes the Screen. */
 function void init() {
 let screen = 16384;
 let cur = true;
 return;
 }

 /** Erases the entire screen. */
 function void clearScreen() {
 var int i;
 let i = 0;
 while ( i < 8192){
 let screen[i] = 0;
 let i = i + 1;
 }
 return;
 }

 /** Sets the current color, to be used for all subsequent drawXXX commands.
 * Black is represented by true, white by false. */
 function void setColor(boolean b) {
 let cur = b;
 return;
 }

 /** Draws the (x,y) pixel, using the current color. */
 function void drawPixel(int x, int y) {
 var int addr, temp, tempX;
 let addr = (^^^^^y)+(####x);
 let tempX = x - ^^^^(####x);
 let temp = 1;
 while ( tempX > 0 ) { let temp = ^temp; let tempX = tempX - 1; }
 if (cur){ let screen[addr] = screen[addr] | temp;}
 else { let screen [addr] = screen [addr] & ~temp;}
 return;
 }

 /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
 function void drawLine(int x1, int y1, int x2, int y2) {
 var int a,b,diff, dx, dy;
 let a = 0;
 let b = 0;
 let diff = 0;
 let dx = (x2 - x1);
 let dy = (y2 - y1);
    if (x1=x2){do Screen.drawX(x1, y1, y2);return;}
 if (y1=y2){do Screen.drawY(y1, x1, x2);return;}

 if ((x2 > x1) & (y2 > y1)) {
 while((a < (dx + 1)) & (b < (dy + 1))) {
 do Screen.drawPixel(x1 + a, y1 + b);
 if (diff < 0) {
 let a = a + 1;
 let diff = diff + dy;
 }
 else {
 let b = b + 1;
 let diff = diff - dx;
 }
 }
 }
 if ((x2 < x1) & (y2 > y1)) {
 let dx = -dx;
 while((a < (dx + 1)) & (b < (dy + 1))) {
 do Screen.drawPixel(x1 - a, y1 + b);
 if (diff < 0) {
 let a = a + 1;
 let diff = diff + dy;
 }
 else {
 let b = b + 1;
 let diff = diff - dx;
 }
 }
 }

 if ((x2 > x1) & (y2 < y1)) {
 let dy = -dy;
 while((a < (dx + 1)) & (b < (dy + 1))) {
 do Screen.drawPixel(x1 + a, y1 - b);
 if (diff < 0) {
 let a = a + 1;
 let diff = diff + dy;
 }
 else {
let b = b + 1;
 let diff = diff - dx;
 }
 }
 }

 if ((x2 < x1) & (y2 < y1)) {
 let dy = -dy;
 let dx = -dx;
 while((a < (dx + 1)) & (b < (dy + 1))) {
 do Screen.drawPixel(x1 - a, y1 - b);
 if (diff < 0) {
 let a = a + 1;
 let diff = diff + dy;
 }
 else {
 let b = b + 1;
 let diff = diff - dx;
 }
 }
 }
 return;
 }
 function void drawX(int x, int y1, int y2){
 var int s,e;
 if (y1=y2){do Screen.drawPixel(x,y1);return;}
 let s = Math.min(y1,y2);
 let e = Math.max(y1,y2);
 do Screen.drawPixel(x,s);
 while (s < e){
 do Screen.drawPixel(x, s);
 let s = s + 1;
 }
 return;
 }

 function void drawY(int y, int x1, int x2){
 var int s,e;
 if (x1=x2){do Screen.drawPixel(x1,y);return;}
 let s = Math.min(x1,x2);
 let e = Math.max(x1,x2);
 do Screen.drawPixel(e,y);
 while (s < e){
 do Screen.drawPixel(s, y);
 let s = s + 1;
 }
 return;
 }

 /** Draws a filled rectangle whose top left corner is (x1, y1)
 * and bottom right corner is (x2,y2), using the current color. */
 function void drawRectangle(int x1, int y1, int x2, int y2) {
 var int e,s;
 if (x1=x2){do Screen.drawX(x1,y1,y2);}
 let s = Math.min(x1,x2);
 let e = Math.max(x1,x2);
 do Screen.drawX(e, y1, y2);
 do Screen.drawY(y1,x1,x2);
 do Screen.drawY(y2,x1,x2);
 while (s<e){
 do Screen.drawX(s, y1, y2);
 let s = s + 1;
 }
 return;

 }

 /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
 function void drawCircle(int x, int y, int r) {
 var int i;
 let i = -r;
 while ( i < (r + 1)){
 do Screen.drawLine(x - Math.sqrt(r*r - (Math.abs(i)*Math.abs(i))),y + i, x + Math.sqrt(r*r - (Math.abs(i)*Math.abs(i))), y + i);
 let i = i + 1;
 }
return;
 }
 }

