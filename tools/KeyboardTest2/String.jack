// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array string;
    field int length;
    field int max;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0){let max = 1;}
        else {let max = maxLength;}
        let string = Array.new(max);
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do string.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }
    method void deleteChar(){
        let length = length-1;
        return;
    }
    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return string[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let string[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < max){
            let string[length] = c;
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0){
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val;
        var int i;
        var int d;
        var boolean isNeg;
        let isNeg = false;
        let val = 0;
        let i=0;
        let d=0;
        if ((length>0) & (string[i] = 45)){
            let isNeg=true;
            let i=1;
        }
        while (i < length){
            if (string[i] > 47 & string[i] < 58){
                let val = (val * 10) + (string[i] - 48);
            }
            let i=i+1;
        }
        if (isNeg){
            return -val;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length=0;
        if(val<0){
            let val=-val;
            do appendChar(45); // -
        }
        do setIntHelper(val);
        return;
    }

    method void setIntHelper(int val){
        var int lastDigit;
        var int mod;
        let lastDigit = val/10;
        let mod = val - (lastDigit*10);
        if (val < 10){
            do appendChar(mod + 48);
        }
        else{
            do setInt(lastDigit);
            do appendChar(mod + 48);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
            return 34;
    }
}
