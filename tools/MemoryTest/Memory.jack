// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {

    static Array ram, heap;
    static int free;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let heap[0] = 0; // free
        let heap[1] = 14335;  // size
        let free = 2048;

        return;
    }



    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
      function int alloc(int size) {
            var Array block;
            var int next, newSize;
            var Array newBlock;

            let newSize = free[1];
            let next = free[0];
             let block = free;

            if (newSize > (size + 2)) {
                let free = free + size + 2;
                let free[0] = 0;
                let free[1] = newSize - size - 2;
                let block[0] = 0;
                let block[1] = size;
                return block + 2;
            }
            // advance
            while ( ~(next = 0) ) {
                let block = next;
                let newSize = block[1];
                let next = block[0];

                if (newSize > (size + 2)) {
                    let newSize = newSize - size - 2;
                    let block[1] = newSize;
                    let newBlock = block + newSize;
                    let newBlock[0] = 0;
                    let newBlock[1] = size;
                    return newBlock + 2;
                }
            }
            return 0;

        }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array next, s;

        let next = free;
        let s = free[0];
        //put s to end
        while (~(s=0)) {
            let next = s;
            let s = next[0];
        }
        let s = o;
        return;
    }

    /** Returns the RAM value at the given address. */
     function int peek(int address) {
         return ram[address];
     }

     /** Sets the RAM value at the given address to the given value. */
     function void poke(int address, int value) {
         let ram[address] = value;
         return;
     }

    function int max(Array o){
        var Array s;
        var int size, max,i;
        do Output.println();
        let s=o-1;
        let size=s[0];
        let max=o[0];
        let i=0;
        while (~(i=size)){
            if (o[i]>max){
                let max=o[i];
            }
            let i=i+1;
        }
        return max;
     }
}
