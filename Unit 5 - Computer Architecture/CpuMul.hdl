// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14] and instruction[13] equals 1)
// the CpuMul behave exactly as the same as the regular CPU.
// If the instruction is a c-instruction and instruction[14] == 0, the chip will 
// behave as follows:
//  Instruction  | 12 | 11 | 10 |
// ______________________________
// dest=D<<;jump | 0  | 1  | 1  |
// dest=A<<;jump | 0  | 1  | 0  |
// dest=M<<;jump | 1  | 1  | 0  |
// dest=D>>;jump | 0  | 0  | 1  |
// dest=A>>;jump | 0  | 0  | 0  |
// dest=M>>;jump | 1  | 0  | 0  |

CHIP CpuMul {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    
    PARTS:
    // Put your code here:
    Mux16(a=instruction, b=fromALU, sel=instruction[15], out=toAreg);
    And(a=instruction[3], b=instruction[15], out=writeM);
    Not(in=instruction[15], out=not15);
    Or(a=not15, b=instruction[5], out=writeA);
    ARegister(in=toAreg, load=writeA, out=fromAreg, out[0..14]=addressM);
    Mux16(a=fromAreg, b=inM, sel=instruction[12], out=toALU);
    And(a=instruction[4], b=instruction[15], out=writeD);
    DRegister(in=fromALU, load=writeD, out=fromDreg);

    //decide what they ALU does with an instruction:
    //if it is a A-instruction then we just do D+0=D
    ExtendAlu(x=fromDreg, y=toALU, instruction=instruction[6..14] , out=outM, out=fromALU, zr=zr , ng=ng);

    //g function (calculates jumping):
    Or(a=zr, b=ng, out=notps);
    Not(in=notps, out=ps);
    And(a=ps, b=instruction[0], out=gt);
    And(a=zr, b=instruction[1], out=eq);
    And(a=ng, b=instruction[2], out=lt);
    Or(a=gt, b=eq, out=gteq);
    Or(a=gteq, b=lt, out=g);
    And(a=instruction[15], b=g, out=tojump); //decide if we need to jump
    PC(in=fromAreg, load=tojump, inc=true, reset=reset, out[0..14]=pc);

}