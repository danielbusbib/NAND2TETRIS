@256
D=A
@SP
M=D
@RETURN1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(RETURN1)
//function Array.new 0
(Array.new)
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG0
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn0
D;JLT
@R13
D=D-M
@ST0
0;JMP
(IFBNEG0)
@SP
M=M-1
A=M
D=M
@BnAp0
D;JGT
@R13
D=D-M
A=D
@ST0
0;JMP
(BpAn0)
D=-1
@ST0
0;JMP
(BnAp0)
D=1
@ST0
0;JMP
(ST0)
@TRUE0
D;JGT
D=0
@SAF0
0;JMP
(TRUE0)
D=-1
@SAF0
0;JMP
(SAF0)
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
A=M-1
M=!M
//if-goto IF_TRUE0
@SP
M=M-1
A=M
D=M
@Array.vmIF_TRUE0Array.new
D;JNE
//goto IF_FALSE0
@Array.vmIF_FALSE0Array.new
0;JMP
//label IF_TRUE0
(Array.vmIF_TRUE0Array.new)
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//call Sys.error 1
@RETURN2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(RETURN2)
//pop temp 0
@0
D=A
@5
A=A+D
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
M=0
@R13
A=M
M=D
@R13
M=0
//label IF_FALSE0
(Array.vmIF_FALSE0Array.new)
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//call Memory.alloc 1
@RETURN3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(RETURN3)
//return
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
D=A
@ARG
A=M
D=A+D
@R15
M=D
@SP
M=M-1
A=M
D=M
@R15
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R13
M=M-1
A=M
D=M
@THAT
M=D
@R13
M=M-1
A=M
D=M
@THIS
M=D
@R13
M=M-1
A=M
D=M
@ARG
M=D
@R13
M=M-1
A=M
D=M
@LCL
M=D
@R14
A=M
0;JMP
//function Array.dispose 0
(Array.dispose)
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@SP
AM=M-1
D=M
M=0
@3
M=D
//push pointer 0
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
//call Memory.deAlloc 1
@RETURN4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(RETURN4)
//pop temp 0
@0
D=A
@5
A=A+D
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
M=0
@R13
A=M
M=D
@R13
M=0
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//return
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
D=A
@ARG
A=M
D=A+D
@R15
M=D
@SP
M=M-1
A=M
D=M
@R15
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R13
M=M-1
A=M
D=M
@THAT
M=D
@R13
M=M-1
A=M
D=M
@THIS
M=D
@R13
M=M-1
A=M
D=M
@ARG
M=D
@R13
M=M-1
A=M
D=M
@LCL
M=D
@R14
A=M
0;JMP
@256
D=A
@SP
M=D
@RETURN5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(RETURN5)
//function Main.main 2
(Main.main)
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 1
@1
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//label WHILE_EXP0
(Main.vmWHILE_EXP0Main.main)
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 10
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG1
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn1
D;JLT
@R13
D=D-M
@ST1
0;JMP
(IFBNEG1)
@SP
M=M-1
A=M
D=M
@BnAp1
D;JGT
@R13
D=D-M
A=D
@ST1
0;JMP
(BpAn1)
D=-1
@ST1
0;JMP
(BnAp1)
D=1
@ST1
0;JMP
(ST1)
@TRUE1
D;JLT
D=0
@SAF1
0;JMP
(TRUE1)
D=-1
@SAF1
0;JMP
(SAF1)
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
A=M-1
M=!M
//if-goto WHILE_END0
@SP
M=M-1
A=M
D=M
@Main.vmWHILE_END0Main.main
D;JNE
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop local 1
@1
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//goto WHILE_EXP0
@Main.vmWHILE_EXP0Main.main
0;JMP
//label WHILE_END0
(Main.vmWHILE_END0Main.main)
//push constant 5000
@5000
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//call Memory.poke 2
@RETURN6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.poke
0;JMP
(RETURN6)
//pop temp 0
@0
D=A
@5
A=A+D
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
M=0
@R13
A=M
M=D
@R13
M=0
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//return
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
D=A
@ARG
A=M
D=A+D
@R15
M=D
@SP
M=M-1
A=M
D=M
@R15
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R13
M=M-1
A=M
D=M
@THAT
M=D
@R13
M=M-1
A=M
D=M
@THIS
M=D
@R13
M=M-1
A=M
D=M
@ARG
M=D
@R13
M=M-1
A=M
D=M
@LCL
M=D
@R14
A=M
0;JMP
@256
D=A
@SP
M=D
@RETURN7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(RETURN7)
//function Math.init 1
(Math.init)
@SP
A=M
M=0
@SP
M=M+1
//push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
//call Array.new 1
@RETURN8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(RETURN8)
//pop static 1
@SP
M=M-1
A=M
D=M
@Math.vm.1
M=D
//push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
//call Array.new 1
@RETURN9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(RETURN9)
//pop static 0
@SP
M=M-1
A=M
D=M
@Math.vm.0
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.vm.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@0
D=A
@5
A=A+D
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
M=0
@R13
A=M
M=D
@R13
M=0
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push temp 0
@R11
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//label WHILE_EXP0
(Math.vmWHILE_EXP0Math.init)
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 15
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG2
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn2
D;JLT
@R13
D=D-M
@ST2
0;JMP
(IFBNEG2)
@SP
M=M-1
A=M
D=M
@BnAp2
D;JGT
@R13
D=D-M
A=D
@ST2
0;JMP
(BpAn2)
D=-1
@ST2
0;JMP
(BnAp2)
D=1
@ST2
0;JMP
(ST2)
@TRUE2
D;JLT
D=0
@SAF2
0;JMP
(TRUE2)
D=-1
@SAF2
0;JMP
(SAF2)
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
A=M-1
M=!M
//if-goto WHILE_END0
@SP
M=M-1
A=M
D=M
@Math.vmWHILE_END0Math.init
D;JNE
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.vm.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D-M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//push static 0
@Math.vm.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D-M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//push static 0
@Math.vm.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop temp 0
@0
D=A
@5
A=A+D
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
M=0
@R13
A=M
M=D
@R13
M=0
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push temp 0
@R11
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//goto WHILE_EXP0
@Math.vmWHILE_EXP0Math.init
0;JMP
//label WHILE_END0
(Math.vmWHILE_END0Math.init)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//return
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
D=A
@ARG
A=M
D=A+D
@R15
M=D
@SP
M=M-1
A=M
D=M
@R15
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R13
M=M-1
A=M
D=M
@THAT
M=D
@R13
M=M-1
A=M
D=M
@THIS
M=D
@R13
M=M-1
A=M
D=M
@ARG
M=D
@R13
M=M-1
A=M
D=M
@LCL
M=D
@R14
A=M
0;JMP
//function Math.abs 0
(Math.abs)
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG3
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn3
D;JLT
@R13
D=D-M
@ST3
0;JMP
(IFBNEG3)
@SP
M=M-1
A=M
D=M
@BnAp3
D;JGT
@R13
D=D-M
A=D
@ST3
0;JMP
(BpAn3)
D=-1
@ST3
0;JMP
(BnAp3)
D=1
@ST3
0;JMP
(ST3)
@TRUE3
D;JLT
D=0
@SAF3
0;JMP
(TRUE3)
D=-1
@SAF3
0;JMP
(SAF3)
@SP
A=M
M=D
@SP
M=M+1
//if-goto IF_TRUE0
@SP
M=M-1
A=M
D=M
@Math.vmIF_TRUE0Math.abs
D;JNE
//goto IF_FALSE0
@Math.vmIF_FALSE0Math.abs
0;JMP
//label IF_TRUE0
(Math.vmIF_TRUE0Math.abs)
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//neg
D=0
@SP
A=M-1
M=D-M
//pop argument 0
@0
D=A
@ARG
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//label IF_FALSE0
(Math.vmIF_FALSE0Math.abs)
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//return
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
D=A
@ARG
A=M
D=A+D
@R15
M=D
@SP
M=M-1
A=M
D=M
@R15
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R13
M=M-1
A=M
D=M
@THAT
M=D
@R13
M=M-1
A=M
D=M
@THIS
M=D
@R13
M=M-1
A=M
D=M
@ARG
M=D
@R13
M=M-1
A=M
D=M
@LCL
M=D
@R14
A=M
0;JMP
//function Math.multiply 5
(Math.multiply)
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG4
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn4
D;JLT
@R13
D=D-M
@ST4
0;JMP
(IFBNEG4)
@SP
M=M-1
A=M
D=M
@BnAp4
D;JGT
@R13
D=D-M
A=D
@ST4
0;JMP
(BpAn4)
D=-1
@ST4
0;JMP
(BnAp4)
D=1
@ST4
0;JMP
(ST4)
@TRUE4
D;JLT
D=0
@SAF4
0;JMP
(TRUE4)
D=-1
@SAF4
0;JMP
(SAF4)
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG5
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn5
D;JLT
@R13
D=D-M
@ST5
0;JMP
(IFBNEG5)
@SP
M=M-1
A=M
D=M
@BnAp5
D;JGT
@R13
D=D-M
A=D
@ST5
0;JMP
(BpAn5)
D=-1
@ST5
0;JMP
(BnAp5)
D=1
@ST5
0;JMP
(ST5)
@TRUE5
D;JGT
D=0
@SAF5
0;JMP
(TRUE5)
D=-1
@SAF5
0;JMP
(SAF5)
@SP
A=M
M=D
@SP
M=M+1
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG6
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn6
D;JLT
@R13
D=D-M
@ST6
0;JMP
(IFBNEG6)
@SP
M=M-1
A=M
D=M
@BnAp6
D;JGT
@R13
D=D-M
A=D
@ST6
0;JMP
(BpAn6)
D=-1
@ST6
0;JMP
(BnAp6)
D=1
@ST6
0;JMP
(ST6)
@TRUE6
D;JGT
D=0
@SAF6
0;JMP
(TRUE6)
D=-1
@SAF6
0;JMP
(SAF6)
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG7
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn7
D;JLT
@R13
D=D-M
@ST7
0;JMP
(IFBNEG7)
@SP
M=M-1
A=M
D=M
@BnAp7
D;JGT
@R13
D=D-M
A=D
@ST7
0;JMP
(BpAn7)
D=-1
@ST7
0;JMP
(BnAp7)
D=1
@ST7
0;JMP
(ST7)
@TRUE7
D;JLT
D=0
@SAF7
0;JMP
(TRUE7)
D=-1
@SAF7
0;JMP
(SAF7)
@SP
A=M
M=D
@SP
M=M+1
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M
//pop local 4
@4
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//call Math.abs 1
@RETURN10
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(RETURN10)
//pop argument 0
@0
D=A
@ARG
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//call Math.abs 1
@RETURN11
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(RETURN11)
//pop argument 1
@1
D=A
@ARG
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG8
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn8
D;JLT
@R13
D=D-M
@ST8
0;JMP
(IFBNEG8)
@SP
M=M-1
A=M
D=M
@BnAp8
D;JGT
@R13
D=D-M
A=D
@ST8
0;JMP
(BpAn8)
D=-1
@ST8
0;JMP
(BnAp8)
D=1
@ST8
0;JMP
(ST8)
@TRUE8
D;JLT
D=0
@SAF8
0;JMP
(TRUE8)
D=-1
@SAF8
0;JMP
(SAF8)
@SP
A=M
M=D
@SP
M=M+1
//if-goto IF_TRUE0
@SP
M=M-1
A=M
D=M
@Math.vmIF_TRUE0Math.multiply
D;JNE
//goto IF_FALSE0
@Math.vmIF_FALSE0Math.multiply
0;JMP
//label IF_TRUE0
(Math.vmIF_TRUE0Math.multiply)
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 1
@1
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop argument 0
@0
D=A
@ARG
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop argument 1
@1
D=A
@ARG
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//label IF_FALSE0
(Math.vmIF_FALSE0Math.multiply)
//label WHILE_EXP0
(Math.vmWHILE_EXP0Math.multiply)
//push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG9
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn9
D;JLT
@R13
D=D-M
@ST9
0;JMP
(IFBNEG9)
@SP
M=M-1
A=M
D=M
@BnAp9
D;JGT
@R13
D=D-M
A=D
@ST9
0;JMP
(BpAn9)
D=-1
@ST9
0;JMP
(BnAp9)
D=1
@ST9
0;JMP
(ST9)
@TRUE9
D;JLT
D=0
@SAF9
0;JMP
(TRUE9)
D=-1
@SAF9
0;JMP
(SAF9)
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
A=M-1
M=!M
//if-goto WHILE_END0
@SP
M=M-1
A=M
D=M
@Math.vmWHILE_END0Math.multiply
D;JNE
//push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.vm.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG10
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn10
D;JLT
@R13
D=D-M
@ST10
0;JMP
(IFBNEG10)
@SP
M=M-1
A=M
D=M
@BnAp10
D;JGT
@R13
D=D-M
A=D
@ST10
0;JMP
(BpAn10)
D=-1
@ST10
0;JMP
(BnAp10)
D=1
@ST10
0;JMP
(ST10)
@TRUE10
D;JGT
D=0
@SAF10
0;JMP
(TRUE10)
D=-1
@SAF10
0;JMP
(SAF10)
@SP
A=M
M=D
@SP
M=M+1
//if-goto IF_TRUE1
@SP
M=M-1
A=M
D=M
@Math.vmIF_TRUE1Math.multiply
D;JNE
//goto IF_FALSE1
@Math.vmIF_FALSE1Math.multiply
0;JMP
//label IF_TRUE1
(Math.vmIF_TRUE1Math.multiply)
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.vm.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop local 2
@2
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//label IF_FALSE1
(Math.vmIF_FALSE1Math.multiply)
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop argument 0
@0
D=A
@ARG
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop local 3
@3
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//goto WHILE_EXP0
@Math.vmWHILE_EXP0Math.multiply
0;JMP
//label WHILE_END0
(Math.vmWHILE_END0Math.multiply)
//push local 4
@4
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//if-goto IF_TRUE2
@SP
M=M-1
A=M
D=M
@Math.vmIF_TRUE2Math.multiply
D;JNE
//goto IF_FALSE2
@Math.vmIF_FALSE2Math.multiply
0;JMP
//label IF_TRUE2
(Math.vmIF_TRUE2Math.multiply)
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//neg
D=0
@SP
A=M-1
M=D-M
//pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//label IF_FALSE2
(Math.vmIF_FALSE2Math.multiply)
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//return
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
D=A
@ARG
A=M
D=A+D
@R15
M=D
@SP
M=M-1
A=M
D=M
@R15
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R13
M=M-1
A=M
D=M
@THAT
M=D
@R13
M=M-1
A=M
D=M
@THIS
M=D
@R13
M=M-1
A=M
D=M
@ARG
M=D
@R13
M=M-1
A=M
D=M
@LCL
M=D
@R14
A=M
0;JMP
//function Math.divide 4
(Math.divide)
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
//push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG11
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn11
D;JLT
@R13
D=D-M
@ST11
0;JMP
(IFBNEG11)
@SP
M=M-1
A=M
D=M
@BnAp11
D;JGT
@R13
D=D-M
A=D
@ST11
0;JMP
(BpAn11)
D=-1
@ST11
0;JMP
(BnAp11)
D=1
@ST11
0;JMP
(ST11)
@TRUE11
D;JEQ
D=0
@SAF11
0;JMP
(TRUE11)
D=-1
@SAF11
0;JMP
(SAF11)
@SP
A=M
M=D
@SP
M=M+1
//if-goto IF_TRUE0
@SP
M=M-1
A=M
D=M
@Math.vmIF_TRUE0Math.divide
D;JNE
//goto IF_FALSE0
@Math.vmIF_FALSE0Math.divide
0;JMP
//label IF_TRUE0
(Math.vmIF_TRUE0Math.divide)
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//call Sys.error 1
@RETURN12
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(RETURN12)
//pop temp 0
@0
D=A
@5
A=A+D
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
M=0
@R13
A=M
M=D
@R13
M=0
//label IF_FALSE0
(Math.vmIF_FALSE0Math.divide)
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG12
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn12
D;JLT
@R13
D=D-M
@ST12
0;JMP
(IFBNEG12)
@SP
M=M-1
A=M
D=M
@BnAp12
D;JGT
@R13
D=D-M
A=D
@ST12
0;JMP
(BpAn12)
D=-1
@ST12
0;JMP
(BnAp12)
D=1
@ST12
0;JMP
(ST12)
@TRUE12
D;JLT
D=0
@SAF12
0;JMP
(TRUE12)
D=-1
@SAF12
0;JMP
(SAF12)
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG13
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn13
D;JLT
@R13
D=D-M
@ST13
0;JMP
(IFBNEG13)
@SP
M=M-1
A=M
D=M
@BnAp13
D;JGT
@R13
D=D-M
A=D
@ST13
0;JMP
(BpAn13)
D=-1
@ST13
0;JMP
(BnAp13)
D=1
@ST13
0;JMP
(ST13)
@TRUE13
D;JGT
D=0
@SAF13
0;JMP
(TRUE13)
D=-1
@SAF13
0;JMP
(SAF13)
@SP
A=M
M=D
@SP
M=M+1
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG14
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn14
D;JLT
@R13
D=D-M
@ST14
0;JMP
(IFBNEG14)
@SP
M=M-1
A=M
D=M
@BnAp14
D;JGT
@R13
D=D-M
A=D
@ST14
0;JMP
(BpAn14)
D=-1
@ST14
0;JMP
(BnAp14)
D=1
@ST14
0;JMP
(ST14)
@TRUE14
D;JGT
D=0
@SAF14
0;JMP
(TRUE14)
D=-1
@SAF14
0;JMP
(SAF14)
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG15
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn15
D;JLT
@R13
D=D-M
@ST15
0;JMP
(IFBNEG15)
@SP
M=M-1
A=M
D=M
@BnAp15
D;JGT
@R13
D=D-M
A=D
@ST15
0;JMP
(BpAn15)
D=-1
@ST15
0;JMP
(BnAp15)
D=1
@ST15
0;JMP
(ST15)
@TRUE15
D;JLT
D=0
@SAF15
0;JMP
(TRUE15)
D=-1
@SAF15
0;JMP
(SAF15)
@SP
A=M
M=D
@SP
M=M+1
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M
//pop local 2
@2
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.vm.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//call Math.abs 1
@RETURN13
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(RETURN13)
//pop temp 0
@0
D=A
@5
A=A+D
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
M=0
@R13
A=M
M=D
@R13
M=0
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push temp 0
@R11
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//call Math.abs 1
@RETURN14
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(RETURN14)
//pop argument 0
@0
D=A
@ARG
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//label WHILE_EXP0
(Math.vmWHILE_EXP0Math.divide)
//push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
A=M-1
M=!M
//not
@SP
A=M-1
M=!M
//if-goto WHILE_END0
@SP
M=M-1
A=M
D=M
@Math.vmWHILE_END0Math.divide
D;JNE
//push constant 32767
@32767
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.vm.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D-M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.vm.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG16
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn16
D;JLT
@R13
D=D-M
@ST16
0;JMP
(IFBNEG16)
@SP
M=M-1
A=M
D=M
@BnAp16
D;JGT
@R13
D=D-M
A=D
@ST16
0;JMP
(BpAn16)
D=-1
@ST16
0;JMP
(BnAp16)
D=1
@ST16
0;JMP
(ST16)
@TRUE16
D;JLT
D=0
@SAF16
0;JMP
(TRUE16)
D=-1
@SAF16
0;JMP
(SAF16)
@SP
A=M
M=D
@SP
M=M+1
//pop local 3
@3
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
A=M-1
M=!M
//if-goto IF_TRUE1
@SP
M=M-1
A=M
D=M
@Math.vmIF_TRUE1Math.divide
D;JNE
//goto IF_FALSE1
@Math.vmIF_FALSE1Math.divide
0;JMP
//label IF_TRUE1
(Math.vmIF_TRUE1Math.divide)
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//push static 1
@Math.vm.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.vm.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.vm.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop temp 0
@0
D=A
@5
A=A+D
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
M=0
@R13
A=M
M=D
@R13
M=0
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push temp 0
@R11
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//push static 1
@Math.vm.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG17
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn17
D;JLT
@R13
D=D-M
@ST17
0;JMP
(IFBNEG17)
@SP
M=M-1
A=M
D=M
@BnAp17
D;JGT
@R13
D=D-M
A=D
@ST17
0;JMP
(BpAn17)
D=-1
@ST17
0;JMP
(BnAp17)
D=1
@ST17
0;JMP
(ST17)
@TRUE17
D;JGT
D=0
@SAF17
0;JMP
(TRUE17)
D=-1
@SAF17
0;JMP
(SAF17)
@SP
A=M
M=D
@SP
M=M+1
//pop local 3
@3
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
A=M-1
M=!M
//if-goto IF_TRUE2
@SP
M=M-1
A=M
D=M
@Math.vmIF_TRUE2Math.divide
D;JNE
//goto IF_FALSE2
@Math.vmIF_FALSE2Math.divide
0;JMP
//label IF_TRUE2
(Math.vmIF_TRUE2Math.divide)
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//label IF_FALSE2
(Math.vmIF_FALSE2Math.divide)
//label IF_FALSE1
(Math.vmIF_FALSE1Math.divide)
//goto WHILE_EXP0
@Math.vmWHILE_EXP0Math.divide
0;JMP
//label WHILE_END0
(Math.vmWHILE_END0Math.divide)
//label WHILE_EXP1
(Math.vmWHILE_EXP1Math.divide)
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//neg
D=0
@SP
A=M-1
M=D-M
//gt
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG18
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn18
D;JLT
@R13
D=D-M
@ST18
0;JMP
(IFBNEG18)
@SP
M=M-1
A=M
D=M
@BnAp18
D;JGT
@R13
D=D-M
A=D
@ST18
0;JMP
(BpAn18)
D=-1
@ST18
0;JMP
(BnAp18)
D=1
@ST18
0;JMP
(ST18)
@TRUE18
D;JGT
D=0
@SAF18
0;JMP
(TRUE18)
D=-1
@SAF18
0;JMP
(SAF18)
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
A=M-1
M=!M
//if-goto WHILE_END1
@SP
M=M-1
A=M
D=M
@Math.vmWHILE_END1Math.divide
D;JNE
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.vm.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG19
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn19
D;JLT
@R13
D=D-M
@ST19
0;JMP
(IFBNEG19)
@SP
M=M-1
A=M
D=M
@BnAp19
D;JGT
@R13
D=D-M
A=D
@ST19
0;JMP
(BpAn19)
D=-1
@ST19
0;JMP
(BnAp19)
D=1
@ST19
0;JMP
(ST19)
@TRUE19
D;JGT
D=0
@SAF19
0;JMP
(TRUE19)
D=-1
@SAF19
0;JMP
(SAF19)
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
A=M-1
M=!M
//if-goto IF_TRUE3
@SP
M=M-1
A=M
D=M
@Math.vmIF_TRUE3Math.divide
D;JNE
//goto IF_FALSE3
@Math.vmIF_FALSE3Math.divide
0;JMP
//label IF_TRUE3
(Math.vmIF_TRUE3Math.divide)
//push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.vm.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop local 1
@1
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.vm.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D-M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop argument 0
@0
D=A
@ARG
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//label IF_FALSE3
(Math.vmIF_FALSE3Math.divide)
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D-M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//goto WHILE_EXP1
@Math.vmWHILE_EXP1Math.divide
0;JMP
//label WHILE_END1
(Math.vmWHILE_END1Math.divide)
//push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//if-goto IF_TRUE4
@SP
M=M-1
A=M
D=M
@Math.vmIF_TRUE4Math.divide
D;JNE
//goto IF_FALSE4
@Math.vmIF_FALSE4Math.divide
0;JMP
//label IF_TRUE4
(Math.vmIF_TRUE4Math.divide)
//push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//neg
D=0
@SP
A=M-1
M=D-M
//pop local 1
@1
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//label IF_FALSE4
(Math.vmIF_FALSE4Math.divide)
//push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//return
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
D=A
@ARG
A=M
D=A+D
@R15
M=D
@SP
M=M-1
A=M
D=M
@R15
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R13
M=M-1
A=M
D=M
@THAT
M=D
@R13
M=M-1
A=M
D=M
@THIS
M=D
@R13
M=M-1
A=M
D=M
@ARG
M=D
@R13
M=M-1
A=M
D=M
@LCL
M=D
@R14
A=M
0;JMP
//function Math.sqrt 2
(Math.sqrt)
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG20
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn20
D;JLT
@R13
D=D-M
@ST20
0;JMP
(IFBNEG20)
@SP
M=M-1
A=M
D=M
@BnAp20
D;JGT
@R13
D=D-M
A=D
@ST20
0;JMP
(BpAn20)
D=-1
@ST20
0;JMP
(BnAp20)
D=1
@ST20
0;JMP
(ST20)
@TRUE20
D;JLT
D=0
@SAF20
0;JMP
(TRUE20)
D=-1
@SAF20
0;JMP
(SAF20)
@SP
A=M
M=D
@SP
M=M+1
//if-goto IF_TRUE0
@SP
M=M-1
A=M
D=M
@Math.vmIF_TRUE0Math.sqrt
D;JNE
//goto IF_FALSE0
@Math.vmIF_FALSE0Math.sqrt
0;JMP
//label IF_TRUE0
(Math.vmIF_TRUE0Math.sqrt)
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//call Sys.error 1
@RETURN15
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(RETURN15)
//pop temp 0
@0
D=A
@5
A=A+D
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
M=0
@R13
A=M
M=D
@R13
M=0
//label IF_FALSE0
(Math.vmIF_FALSE0Math.sqrt)
//push constant 7
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//label WHILE_EXP0
(Math.vmWHILE_EXP0Math.sqrt)
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//neg
D=0
@SP
A=M-1
M=D-M
//gt
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG21
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn21
D;JLT
@R13
D=D-M
@ST21
0;JMP
(IFBNEG21)
@SP
M=M-1
A=M
D=M
@BnAp21
D;JGT
@R13
D=D-M
A=D
@ST21
0;JMP
(BpAn21)
D=-1
@ST21
0;JMP
(BnAp21)
D=1
@ST21
0;JMP
(ST21)
@TRUE21
D;JGT
D=0
@SAF21
0;JMP
(TRUE21)
D=-1
@SAF21
0;JMP
(SAF21)
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
A=M-1
M=!M
//if-goto WHILE_END0
@SP
M=M-1
A=M
D=M
@Math.vmWHILE_END0Math.sqrt
D;JNE
//push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.vm.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.vm.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//call Math.multiply 2
@RETURN16
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(RETURN16)
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG22
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn22
D;JLT
@R13
D=D-M
@ST22
0;JMP
(IFBNEG22)
@SP
M=M-1
A=M
D=M
@BnAp22
D;JGT
@R13
D=D-M
A=D
@ST22
0;JMP
(BpAn22)
D=-1
@ST22
0;JMP
(BnAp22)
D=1
@ST22
0;JMP
(ST22)
@TRUE22
D;JGT
D=0
@SAF22
0;JMP
(TRUE22)
D=-1
@SAF22
0;JMP
(SAF22)
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
A=M-1
M=!M
//if-goto IF_TRUE1
@SP
M=M-1
A=M
D=M
@Math.vmIF_TRUE1Math.sqrt
D;JNE
//goto IF_FALSE1
@Math.vmIF_FALSE1Math.sqrt
0;JMP
//label IF_TRUE1
(Math.vmIF_TRUE1Math.sqrt)
//push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.vm.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop local 1
@1
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//label IF_FALSE1
(Math.vmIF_FALSE1Math.sqrt)
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D-M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//goto WHILE_EXP0
@Math.vmWHILE_EXP0Math.sqrt
0;JMP
//label WHILE_END0
(Math.vmWHILE_END0Math.sqrt)
//push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//return
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
D=A
@ARG
A=M
D=A+D
@R15
M=D
@SP
M=M-1
A=M
D=M
@R15
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R13
M=M-1
A=M
D=M
@THAT
M=D
@R13
M=M-1
A=M
D=M
@THIS
M=D
@R13
M=M-1
A=M
D=M
@ARG
M=D
@R13
M=M-1
A=M
D=M
@LCL
M=D
@R14
A=M
0;JMP
//function Math.max 0
(Math.max)
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG23
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn23
D;JLT
@R13
D=D-M
@ST23
0;JMP
(IFBNEG23)
@SP
M=M-1
A=M
D=M
@BnAp23
D;JGT
@R13
D=D-M
A=D
@ST23
0;JMP
(BpAn23)
D=-1
@ST23
0;JMP
(BnAp23)
D=1
@ST23
0;JMP
(ST23)
@TRUE23
D;JGT
D=0
@SAF23
0;JMP
(TRUE23)
D=-1
@SAF23
0;JMP
(SAF23)
@SP
A=M
M=D
@SP
M=M+1
//if-goto IF_TRUE0
@SP
M=M-1
A=M
D=M
@Math.vmIF_TRUE0Math.max
D;JNE
//goto IF_FALSE0
@Math.vmIF_FALSE0Math.max
0;JMP
//label IF_TRUE0
(Math.vmIF_TRUE0Math.max)
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop argument 1
@1
D=A
@ARG
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//label IF_FALSE0
(Math.vmIF_FALSE0Math.max)
//push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//return
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
D=A
@ARG
A=M
D=A+D
@R15
M=D
@SP
M=M-1
A=M
D=M
@R15
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R13
M=M-1
A=M
D=M
@THAT
M=D
@R13
M=M-1
A=M
D=M
@THIS
M=D
@R13
M=M-1
A=M
D=M
@ARG
M=D
@R13
M=M-1
A=M
D=M
@LCL
M=D
@R14
A=M
0;JMP
//function Math.min 0
(Math.min)
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG24
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn24
D;JLT
@R13
D=D-M
@ST24
0;JMP
(IFBNEG24)
@SP
M=M-1
A=M
D=M
@BnAp24
D;JGT
@R13
D=D-M
A=D
@ST24
0;JMP
(BpAn24)
D=-1
@ST24
0;JMP
(BnAp24)
D=1
@ST24
0;JMP
(ST24)
@TRUE24
D;JLT
D=0
@SAF24
0;JMP
(TRUE24)
D=-1
@SAF24
0;JMP
(SAF24)
@SP
A=M
M=D
@SP
M=M+1
//if-goto IF_TRUE0
@SP
M=M-1
A=M
D=M
@Math.vmIF_TRUE0Math.min
D;JNE
//goto IF_FALSE0
@Math.vmIF_FALSE0Math.min
0;JMP
//label IF_TRUE0
(Math.vmIF_TRUE0Math.min)
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop argument 1
@1
D=A
@ARG
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//label IF_FALSE0
(Math.vmIF_FALSE0Math.min)
//push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//return
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
D=A
@ARG
A=M
D=A+D
@R15
M=D
@SP
M=M-1
A=M
D=M
@R15
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R13
M=M-1
A=M
D=M
@THAT
M=D
@R13
M=M-1
A=M
D=M
@THIS
M=D
@R13
M=M-1
A=M
D=M
@ARG
M=D
@R13
M=M-1
A=M
D=M
@LCL
M=D
@R14
A=M
0;JMP
@256
D=A
@SP
M=D
@RETURN17
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(RETURN17)
//function Memory.init 0
(Memory.init)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop static 0
@SP
M=M-1
A=M
D=M
@Memory.vm.0
M=D
//push constant 2048
@2048
D=A
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Memory.vm.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//push constant 14334
@14334
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@0
D=A
@5
A=A+D
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
M=0
@R13
A=M
M=D
@R13
M=0
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push temp 0
@R11
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 2049
@2049
D=A
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Memory.vm.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//push constant 2050
@2050
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@0
D=A
@5
A=A+D
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
M=0
@R13
A=M
M=D
@R13
M=0
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push temp 0
@R11
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//return
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
D=A
@ARG
A=M
D=A+D
@R15
M=D
@SP
M=M-1
A=M
D=M
@R15
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R13
M=M-1
A=M
D=M
@THAT
M=D
@R13
M=M-1
A=M
D=M
@THIS
M=D
@R13
M=M-1
A=M
D=M
@ARG
M=D
@R13
M=M-1
A=M
D=M
@LCL
M=D
@R14
A=M
0;JMP
//function Memory.peek 0
(Memory.peek)
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Memory.vm.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//return
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
D=A
@ARG
A=M
D=A+D
@R15
M=D
@SP
M=M-1
A=M
D=M
@R15
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R13
M=M-1
A=M
D=M
@THAT
M=D
@R13
M=M-1
A=M
D=M
@THIS
M=D
@R13
M=M-1
A=M
D=M
@ARG
M=D
@R13
M=M-1
A=M
D=M
@LCL
M=D
@R14
A=M
0;JMP
//function Memory.poke 0
(Memory.poke)
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Memory.vm.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@0
D=A
@5
A=A+D
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
M=0
@R13
A=M
M=D
@R13
M=0
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push temp 0
@R11
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//return
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
D=A
@ARG
A=M
D=A+D
@R15
M=D
@SP
M=M-1
A=M
D=M
@R15
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R13
M=M-1
A=M
D=M
@THAT
M=D
@R13
M=M-1
A=M
D=M
@THIS
M=D
@R13
M=M-1
A=M
D=M
@ARG
M=D
@R13
M=M-1
A=M
D=M
@LCL
M=D
@R14
A=M
0;JMP
//function Memory.alloc 2
(Memory.alloc)
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG25
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn25
D;JLT
@R13
D=D-M
@ST25
0;JMP
(IFBNEG25)
@SP
M=M-1
A=M
D=M
@BnAp25
D;JGT
@R13
D=D-M
A=D
@ST25
0;JMP
(BpAn25)
D=-1
@ST25
0;JMP
(BnAp25)
D=1
@ST25
0;JMP
(ST25)
@TRUE25
D;JLT
D=0
@SAF25
0;JMP
(TRUE25)
D=-1
@SAF25
0;JMP
(SAF25)
@SP
A=M
M=D
@SP
M=M+1
//if-goto IF_TRUE0
@SP
M=M-1
A=M
D=M
@Memory.vmIF_TRUE0Memory.alloc
D;JNE
//goto IF_FALSE0
@Memory.vmIF_FALSE0Memory.alloc
0;JMP
//label IF_TRUE0
(Memory.vmIF_TRUE0Memory.alloc)
//push constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
//call Sys.error 1
@RETURN18
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(RETURN18)
//pop temp 0
@0
D=A
@5
A=A+D
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
M=0
@R13
A=M
M=D
@R13
M=0
//label IF_FALSE0
(Memory.vmIF_FALSE0Memory.alloc)
//push constant 2048
@2048
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 1
@1
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//label WHILE_EXP0
(Memory.vmWHILE_EXP0Memory.alloc)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG26
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn26
D;JLT
@R13
D=D-M
@ST26
0;JMP
(IFBNEG26)
@SP
M=M-1
A=M
D=M
@BnAp26
D;JGT
@R13
D=D-M
A=D
@ST26
0;JMP
(BpAn26)
D=-1
@ST26
0;JMP
(BnAp26)
D=1
@ST26
0;JMP
(ST26)
@TRUE26
D;JLT
D=0
@SAF26
0;JMP
(TRUE26)
D=-1
@SAF26
0;JMP
(SAF26)
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
A=M-1
M=!M
//if-goto WHILE_END0
@SP
M=M-1
A=M
D=M
@Memory.vmWHILE_END0Memory.alloc
D;JNE
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 1
@1
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//goto WHILE_EXP0
@Memory.vmWHILE_EXP0Memory.alloc
0;JMP
//label WHILE_END0
(Memory.vmWHILE_END0Memory.alloc)
//push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//push constant 16379
@16379
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG27
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn27
D;JLT
@R13
D=D-M
@ST27
0;JMP
(IFBNEG27)
@SP
M=M-1
A=M
D=M
@BnAp27
D;JGT
@R13
D=D-M
A=D
@ST27
0;JMP
(BpAn27)
D=-1
@ST27
0;JMP
(BnAp27)
D=1
@ST27
0;JMP
(ST27)
@TRUE27
D;JGT
D=0
@SAF27
0;JMP
(TRUE27)
D=-1
@SAF27
0;JMP
(SAF27)
@SP
A=M
M=D
@SP
M=M+1
//if-goto IF_TRUE1
@SP
M=M-1
A=M
D=M
@Memory.vmIF_TRUE1Memory.alloc
D;JNE
//goto IF_FALSE1
@Memory.vmIF_FALSE1Memory.alloc
0;JMP
//label IF_TRUE1
(Memory.vmIF_TRUE1Memory.alloc)
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//call Sys.error 1
@RETURN19
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(RETURN19)
//pop temp 0
@0
D=A
@5
A=A+D
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
M=0
@R13
A=M
M=D
@R13
M=0
//label IF_FALSE1
(Memory.vmIF_FALSE1Memory.alloc)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//gt
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG28
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn28
D;JLT
@R13
D=D-M
@ST28
0;JMP
(IFBNEG28)
@SP
M=M-1
A=M
D=M
@BnAp28
D;JGT
@R13
D=D-M
A=D
@ST28
0;JMP
(BpAn28)
D=-1
@ST28
0;JMP
(BnAp28)
D=1
@ST28
0;JMP
(ST28)
@TRUE28
D;JGT
D=0
@SAF28
0;JMP
(TRUE28)
D=-1
@SAF28
0;JMP
(SAF28)
@SP
A=M
M=D
@SP
M=M+1
//if-goto IF_TRUE2
@SP
M=M-1
A=M
D=M
@Memory.vmIF_TRUE2Memory.alloc
D;JNE
//goto IF_FALSE2
@Memory.vmIF_FALSE2Memory.alloc
0;JMP
//label IF_TRUE2
(Memory.vmIF_TRUE2Memory.alloc)
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D-M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D-M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop temp 0
@0
D=A
@5
A=A+D
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
M=0
@R13
A=M
M=D
@R13
M=0
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push temp 0
@R11
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//eq
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG29
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn29
D;JLT
@R13
D=D-M
@ST29
0;JMP
(IFBNEG29)
@SP
M=M-1
A=M
D=M
@BnAp29
D;JGT
@R13
D=D-M
A=D
@ST29
0;JMP
(BpAn29)
D=-1
@ST29
0;JMP
(BnAp29)
D=1
@ST29
0;JMP
(ST29)
@TRUE29
D;JEQ
D=0
@SAF29
0;JMP
(TRUE29)
D=-1
@SAF29
0;JMP
(SAF29)
@SP
A=M
M=D
@SP
M=M+1
//if-goto IF_TRUE3
@SP
M=M-1
A=M
D=M
@Memory.vmIF_TRUE3Memory.alloc
D;JNE
//goto IF_FALSE3
@Memory.vmIF_FALSE3Memory.alloc
0;JMP
//label IF_TRUE3
(Memory.vmIF_TRUE3Memory.alloc)
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop temp 0
@0
D=A
@5
A=A+D
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
M=0
@R13
A=M
M=D
@R13
M=0
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push temp 0
@R11
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//goto IF_END3
@Memory.vmIF_END3Memory.alloc
0;JMP
//label IF_FALSE3
(Memory.vmIF_FALSE3Memory.alloc)
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@0
D=A
@5
A=A+D
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
M=0
@R13
A=M
M=D
@R13
M=0
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push temp 0
@R11
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//label IF_END3
(Memory.vmIF_END3Memory.alloc)
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop temp 0
@0
D=A
@5
A=A+D
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
M=0
@R13
A=M
M=D
@R13
M=0
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push temp 0
@R11
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//label IF_FALSE2
(Memory.vmIF_FALSE2Memory.alloc)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@0
D=A
@5
A=A+D
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
M=0
@R13
A=M
M=D
@R13
M=0
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push temp 0
@R11
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//return
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
D=A
@ARG
A=M
D=A+D
@R15
M=D
@SP
M=M-1
A=M
D=M
@R15
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R13
M=M-1
A=M
D=M
@THAT
M=D
@R13
M=M-1
A=M
D=M
@THIS
M=D
@R13
M=M-1
A=M
D=M
@ARG
M=D
@R13
M=M-1
A=M
D=M
@LCL
M=D
@R14
A=M
0;JMP
//function Memory.deAlloc 2
(Memory.deAlloc)
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D-M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 1
@1
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG30
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn30
D;JLT
@R13
D=D-M
@ST30
0;JMP
(IFBNEG30)
@SP
M=M-1
A=M
D=M
@BnAp30
D;JGT
@R13
D=D-M
A=D
@ST30
0;JMP
(BpAn30)
D=-1
@ST30
0;JMP
(BnAp30)
D=1
@ST30
0;JMP
(ST30)
@TRUE30
D;JEQ
D=0
@SAF30
0;JMP
(TRUE30)
D=-1
@SAF30
0;JMP
(SAF30)
@SP
A=M
M=D
@SP
M=M+1
//if-goto IF_TRUE0
@SP
M=M-1
A=M
D=M
@Memory.vmIF_TRUE0Memory.deAlloc
D;JNE
//goto IF_FALSE0
@Memory.vmIF_FALSE0Memory.deAlloc
0;JMP
//label IF_TRUE0
(Memory.vmIF_TRUE0Memory.deAlloc)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D-M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D-M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop temp 0
@0
D=A
@5
A=A+D
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
M=0
@R13
A=M
M=D
@R13
M=0
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push temp 0
@R11
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//goto IF_END0
@Memory.vmIF_END0Memory.deAlloc
0;JMP
//label IF_FALSE0
(Memory.vmIF_FALSE0Memory.deAlloc)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D-M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop temp 0
@0
D=A
@5
A=A+D
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
M=0
@R13
A=M
M=D
@R13
M=0
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push temp 0
@R11
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//eq
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG31
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn31
D;JLT
@R13
D=D-M
@ST31
0;JMP
(IFBNEG31)
@SP
M=M-1
A=M
D=M
@BnAp31
D;JGT
@R13
D=D-M
A=D
@ST31
0;JMP
(BpAn31)
D=-1
@ST31
0;JMP
(BnAp31)
D=1
@ST31
0;JMP
(ST31)
@TRUE31
D;JEQ
D=0
@SAF31
0;JMP
(TRUE31)
D=-1
@SAF31
0;JMP
(SAF31)
@SP
A=M
M=D
@SP
M=M+1
//if-goto IF_TRUE1
@SP
M=M-1
A=M
D=M
@Memory.vmIF_TRUE1Memory.deAlloc
D;JNE
//goto IF_FALSE1
@Memory.vmIF_FALSE1Memory.deAlloc
0;JMP
//label IF_TRUE1
(Memory.vmIF_TRUE1Memory.deAlloc)
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop temp 0
@0
D=A
@5
A=A+D
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
M=0
@R13
A=M
M=D
@R13
M=0
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push temp 0
@R11
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//goto IF_END1
@Memory.vmIF_END1Memory.deAlloc
0;JMP
//label IF_FALSE1
(Memory.vmIF_FALSE1Memory.deAlloc)
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D+M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@0
D=A
@5
A=A+D
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
M=0
@R13
A=M
M=D
@R13
M=0
//pop pointer 1
@SP
AM=M-1
D=M
M=0
@4
M=D
//push temp 0
@R11
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//label IF_END1
(Memory.vmIF_END1Memory.deAlloc)
//label IF_END0
(Memory.vmIF_END0Memory.deAlloc)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//return
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
D=A
@ARG
A=M
D=A+D
@R15
M=D
@SP
M=M-1
A=M
D=M
@R15
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R13
M=M-1
A=M
D=M
@THAT
M=D
@R13
M=M-1
A=M
D=M
@THIS
M=D
@R13
M=M-1
A=M
D=M
@ARG
M=D
@R13
M=M-1
A=M
D=M
@LCL
M=D
@R14
A=M
0;JMP
@256
D=A
@SP
M=D
@RETURN20
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(RETURN20)
//function Sys.init 0
(Sys.init)
//call Memory.init 0
@RETURN21
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.init
0;JMP
(RETURN21)
//pop temp 0
@0
D=A
@5
A=A+D
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
M=0
@R13
A=M
M=D
@R13
M=0
//call Math.init 0
@RETURN22
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.init
0;JMP
(RETURN22)
//pop temp 0
@0
D=A
@5
A=A+D
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
M=0
@R13
A=M
M=D
@R13
M=0
//call Main.main 0
@RETURN23
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.main
0;JMP
(RETURN23)
//pop temp 0
@0
D=A
@5
A=A+D
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
M=0
@R13
A=M
M=D
@R13
M=0
//label WHILE_EXP0
(Sys.vmWHILE_EXP0Sys.init)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
A=M-1
M=!M
//not
@SP
A=M-1
M=!M
//if-goto WHILE_END0
@SP
M=M-1
A=M
D=M
@Sys.vmWHILE_END0Sys.init
D;JNE
//goto WHILE_EXP0
@Sys.vmWHILE_EXP0Sys.init
0;JMP
//label WHILE_END0
(Sys.vmWHILE_END0Sys.init)
//function Sys.halt 0
(Sys.halt)
//label WHILE_EXP0
(Sys.vmWHILE_EXP0Sys.halt)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
A=M-1
M=!M
//not
@SP
A=M-1
M=!M
//if-goto WHILE_END0
@SP
M=M-1
A=M
D=M
@Sys.vmWHILE_END0Sys.halt
D;JNE
//goto WHILE_EXP0
@Sys.vmWHILE_EXP0Sys.halt
0;JMP
//label WHILE_END0
(Sys.vmWHILE_END0Sys.halt)
//function Sys.wait 1
(Sys.wait)
@SP
A=M
M=0
@SP
M=M+1
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG32
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn32
D;JLT
@R13
D=D-M
@ST32
0;JMP
(IFBNEG32)
@SP
M=M-1
A=M
D=M
@BnAp32
D;JGT
@R13
D=D-M
A=D
@ST32
0;JMP
(BpAn32)
D=-1
@ST32
0;JMP
(BnAp32)
D=1
@ST32
0;JMP
(ST32)
@TRUE32
D;JLT
D=0
@SAF32
0;JMP
(TRUE32)
D=-1
@SAF32
0;JMP
(SAF32)
@SP
A=M
M=D
@SP
M=M+1
//if-goto IF_TRUE0
@SP
M=M-1
A=M
D=M
@Sys.vmIF_TRUE0Sys.wait
D;JNE
//goto IF_FALSE0
@Sys.vmIF_FALSE0Sys.wait
0;JMP
//label IF_TRUE0
(Sys.vmIF_TRUE0Sys.wait)
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//call Sys.error 1
@RETURN24
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(RETURN24)
//pop temp 0
@0
D=A
@5
A=A+D
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
M=0
@R13
A=M
M=D
@R13
M=0
//label IF_FALSE0
(Sys.vmIF_FALSE0Sys.wait)
//label WHILE_EXP0
(Sys.vmWHILE_EXP0Sys.wait)
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG33
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn33
D;JLT
@R13
D=D-M
@ST33
0;JMP
(IFBNEG33)
@SP
M=M-1
A=M
D=M
@BnAp33
D;JGT
@R13
D=D-M
A=D
@ST33
0;JMP
(BpAn33)
D=-1
@ST33
0;JMP
(BnAp33)
D=1
@ST33
0;JMP
(ST33)
@TRUE33
D;JGT
D=0
@SAF33
0;JMP
(TRUE33)
D=-1
@SAF33
0;JMP
(SAF33)
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
A=M-1
M=!M
//if-goto WHILE_END0
@SP
M=M-1
A=M
D=M
@Sys.vmWHILE_END0Sys.wait
D;JNE
//push constant 50
@50
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//label WHILE_EXP1
(Sys.vmWHILE_EXP1Sys.wait)
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
M=M-1
A=M
D=M
@R13
M=D
@IFBNEG34
D;JLT
@SP
M=M-1
A=M
D=M
@BpAn34
D;JLT
@R13
D=D-M
@ST34
0;JMP
(IFBNEG34)
@SP
M=M-1
A=M
D=M
@BnAp34
D;JGT
@R13
D=D-M
A=D
@ST34
0;JMP
(BpAn34)
D=-1
@ST34
0;JMP
(BnAp34)
D=1
@ST34
0;JMP
(ST34)
@TRUE34
D;JGT
D=0
@SAF34
0;JMP
(TRUE34)
D=-1
@SAF34
0;JMP
(SAF34)
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
A=M-1
M=!M
//if-goto WHILE_END1
@SP
M=M-1
A=M
D=M
@Sys.vmWHILE_END1Sys.wait
D;JNE
//push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D-M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//goto WHILE_EXP1
@Sys.vmWHILE_EXP1Sys.wait
0;JMP
//label WHILE_END1
(Sys.vmWHILE_END1Sys.wait)
//push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M
A=A-1
A=A-1
D=M
A=A+1
D=D-M
@SP
M=M-1
M=M-1
A=M
M=D
@SP
M=M+1
//pop argument 0
@0
D=A
@ARG
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//goto WHILE_EXP0
@Sys.vmWHILE_EXP0Sys.wait
0;JMP
//label WHILE_END0
(Sys.vmWHILE_END0Sys.wait)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//return
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
D=A
@ARG
A=M
D=A+D
@R15
M=D
@SP
M=M-1
A=M
D=M
@R15
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R13
M=M-1
A=M
D=M
@THAT
M=D
@R13
M=M-1
A=M
D=M
@THIS
M=D
@R13
M=M-1
A=M
D=M
@ARG
M=D
@R13
M=M-1
A=M
D=M
@LCL
M=D
@R14
A=M
0;JMP
//function Sys.error 0
(Sys.error)
//label WHILE_EXP0
(Sys.vmWHILE_EXP0Sys.error)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
A=M-1
M=!M
//not
@SP
A=M-1
M=!M
//if-goto WHILE_END0
@SP
M=M-1
A=M
D=M
@Sys.vmWHILE_END0Sys.error
D;JNE
//goto WHILE_EXP0
@Sys.vmWHILE_EXP0Sys.error
0;JMP
//label WHILE_END0
(Sys.vmWHILE_END0Sys.error)
